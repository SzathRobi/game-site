import { useContext, useState, useEffect, useRef } from "react";
import Head from "next/head";
import styles from "../styles/Home.module.scss";
import Landing from "../comps/landing/Landing";
import Story from "../comps/story/Story";
import Roadmap from "../comps/roadmap/Roadmap";
import Whitepaper from "../comps/whitepaper/Whitepaper";
import ScrollContext from "../contexts/ScrollContext";

import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

function Home({ buildTimestamp }) {
  const { isScrolling, setIsScrolling } = useContext(ScrollContext);
  //console.log({ buildTimestamp });
  const [offsetY, setOffsetY] = useState(0);
  const handleScroll = () => setOffsetY(window.pageYOffset);

  useEffect(() => {
    window.addEventListener("scroll", handleScroll);

    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const [isPageBottom, setIsPageBottom] = useState(false);

  const [counter, setCounter] = useState(0);

  let timeout = null;

  useEffect(() => {
    window.addEventListener("scroll", () => {
      //if (!isScrolling) {
      setIsScrolling(true);
      () => clearTimeout(timeout);
      //}
      //clearTimeout(myTimeout);
    });
  }, []);

  useEffect(() => {
    timeout = setTimeout(() => {
      setIsScrolling(false);
    }, 5000);

    return () => clearTimeout(timeout);
  }, [isScrolling]);

  useEffect(() => {
    let interval = null;
    interval = setInterval(() => {
      setCounter((counter) => counter + 1);
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  /**
   * if(scrollBarPos == textPos) {
   *  scrollStopFakerContainer_POS = scrollBarPos - textPos
   * }
   */

  const scrollSectionRef = useRef(null);
  const [progress, setProgress] = useState(0);
  const [tween, setTween] = useState(null);

  const [isMobileview, setIsmobileView] = useState(false);
  useEffect(() => {
    setIsmobileView(
      //add 32 to exact px match between getBoundingClientRect and browser
      scrollSectionRef.current.getBoundingClientRect().width + 32 < 767
    );
  }, [offsetY]);

  useEffect(() => {
    if (tween) return;

    gsap.registerPlugin(ScrollTrigger);
    let scrollTween = gsap.to(scrollSectionRef.current, {
      ease: "none",
      //backgroundColor: "#DAF7A6",
      scrollTrigger: {
        trigger: scrollSectionRef.current,
        pin: true,
        anticipatePin: 1,
        invalidateOnRefresh: true,
        refreshPriority: 1,
        start: `top 20%`,
        //start: `top 20%`,
        end: "+=100%",
        markers: false,
        toggleActions: "play reset play reset",
        onUpdate: (self) => {
          let p = (self.progress * 100).toFixed(1);
          setProgress(p);
        },
      },
    });

    setTween(scrollTween);
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Distopy</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.main}>
        <Landing offsetY={offsetY} isScrolling={isScrolling} />
        <div className={styles.scrollStopFakerContainer}>
          <Story
            offsetY={offsetY}
            scrollSectionRef={scrollSectionRef}
            progress={progress}
          />
          <Roadmap />
          <Whitepaper />
        </div>
      </div>
    </div>
  );
}

export const getStaticProps = () => {
  return {
    props: {
      buildTimestamp: Date.now(),
    },
  };
};

export default Home;
